import{_ as a,c as n,o as e,ag as p}from"./chunks/framework.D_D2S754.js";const l="/jiang225638.github.io/assets/nestjs/base/image-20220713221001080.BdZA4s5h.png",i="/jiang225638.github.io/assets/nestjs/base/pasted-from-clipboard.CeOqlfbU.png",h=JSON.parse('{"title":"NestJs","description":"","frontmatter":{},"headers":[],"relativePath":"nestjs/base/index.md","filePath":"nestjs/base/index.md","lastUpdated":1713520108000}'),r={name:"nestjs/base/index.md"};function t(c,s,o,u,b,d){return e(),n("div",null,s[0]||(s[0]=[p('<h1 id="nestjs" tabindex="-1">NestJs <a class="header-anchor" href="#nestjs" aria-label="Permalink to &quot;NestJs&quot;">​</a></h1><p><a href="https://docs.nestjs.com/" target="_blank" rel="noreferrer">Nest.js</a> 用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。</p><p>一般来说，一个请求流经中间件、守卫与拦截器，然后到达管道，并最终回到拦截器中的返回路径中（从而产生响应）。后面的章节向军大叔将分别对每个部分进行讲解。</p><p>本章节来讨论Nest.js的常用功能，更多细节你可以访问 <a href="https://docs.nestjs.com/" target="_blank" rel="noreferrer">英文官网</a> 或 <a href="https://docs.nestjs.cn/" target="_blank" rel="noreferrer">中文网</a> 来学习。</p><blockquote><p>章节中示例用到的数据使用 prima 操作mysql，所以建议按顺序学习。</p></blockquote><p><img src="'+l+`" alt="image-20220713221001080"></p><h2 id="项目创建" tabindex="-1">项目创建 <a class="header-anchor" href="#项目创建" aria-label="Permalink to &quot;项目创建&quot;">​</a></h2><p>下面来创建每一个NestJs项目，因为很多朋友是刚开始学习，所以下面介绍几个概念。</p><h3 id="构建工具" tabindex="-1">构建工具 <a class="header-anchor" href="#构建工具" aria-label="Permalink to &quot;构建工具&quot;">​</a></h3><p>下面对命令行构建工具进行说明，下面说到的工具都可以在 <a href="https://doc.houdunren.com/" target="_blank" rel="noreferrer">后盾人文档库</a> 查看到使用说明。</p><ul><li>可以使用 npm、yarn、pnpm进行包管理，向军大叔建议使用pnpm</li><li>建议安装nrm镜像源管理工具，可以方便切换国内镜像，提高下载速度</li><li>建议安装nvm用于切换node版本</li></ul><h3 id="全局命令" tabindex="-1">全局命令 <a class="header-anchor" href="#全局命令" aria-label="Permalink to &quot;全局命令&quot;">​</a></h3><p>首先全局安装相关命令，你可以使用npm 、yarm、pnpm管理包</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm add -g @nestjs/cli nodemon ts-node</span></span>
<span class="line"><span>nest new project-name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="项目依赖" tabindex="-1">项目依赖 <a class="header-anchor" href="#项目依赖" aria-label="Permalink to &quot;项目依赖&quot;">​</a></h3><p>进入项目目录然后安装项目依赖，包含prisma、表单验证、加密工具、JWT、文件上传、工具包、日期处理等</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm add prisma-binding ts-node @prisma/client mockjs @nestjs/config class-validator class-transformer argon2 @nestjs/passport passport passport-local @nestjs/jwt passport-jwt lodash multer dayjs express redis @nestjs/throttler mockjs @nestjs/cache-manager cache-manager md5 @casl/prisma @casl/ability</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pnpm add -D prisma typescript @types/node @types/mockjs @nestjs/mapped-types @types/passport-local @types/passport-jwt @types/express @types/lodash @types/multer @types/cache-manager @types/md5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意事项：</p><ul><li>ts-node 要安装在 dependencies</li></ul><h2 id="vscode" tabindex="-1">vscode <a class="header-anchor" href="#vscode" aria-label="Permalink to &quot;vscode&quot;">​</a></h2><p>建议使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">vscode</a> 他对前端支持非常好且免费</p><h3 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h3><p>请安装以下插件为NestJs提供支持</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=Prisma.prisma" target="_blank" rel="noreferrer">Prisma</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next" target="_blank" rel="noreferrer">JavaScript and TypeScript Nightly</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv" target="_blank" rel="noreferrer">DotENV</a></li></ul><h3 id="prettierrc" tabindex="-1">prettierrc <a class="header-anchor" href="#prettierrc" aria-label="Permalink to &quot;prettierrc&quot;">​</a></h3><p>NestJs项目创建后会生成<code>.prettierrc</code>文件，这是代码格式化规范，下面是向军大叔的配置。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;arrowParens&quot;: &quot;always&quot;,</span></span>
<span class="line"><span>  &quot;bracketSameLine&quot;: true,</span></span>
<span class="line"><span>  &quot;bracketSpacing&quot;: true,</span></span>
<span class="line"><span>  &quot;embeddedLanguageFormatting&quot;: &quot;auto&quot;,</span></span>
<span class="line"><span>  &quot;htmlWhitespaceSensitivity&quot;: &quot;css&quot;,</span></span>
<span class="line"><span>  &quot;insertPragma&quot;: false,</span></span>
<span class="line"><span>  &quot;jsxSingleQuote&quot;: false,</span></span>
<span class="line"><span>  &quot;printWidth&quot;: 120,</span></span>
<span class="line"><span>  &quot;proseWrap&quot;: &quot;never&quot;,</span></span>
<span class="line"><span>  &quot;quoteProps&quot;: &quot;as-needed&quot;,</span></span>
<span class="line"><span>  &quot;requirePragma&quot;: false,</span></span>
<span class="line"><span>  &quot;semi&quot;: false,</span></span>
<span class="line"><span>  &quot;singleQuote&quot;: true,</span></span>
<span class="line"><span>  &quot;tabWidth&quot;: 2,</span></span>
<span class="line"><span>  &quot;trailingComma&quot;: &quot;all&quot;,</span></span>
<span class="line"><span>  &quot;useTabs&quot;: false,</span></span>
<span class="line"><span>  &quot;vueIndentScriptAndStyle&quot;: false,</span></span>
<span class="line"><span>  &quot;singleAttributePerLine&quot;: false</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="依赖注入" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入" aria-label="Permalink to &quot;依赖注入&quot;">​</a></h2><p>依赖注入指创建对象的过程由框架自动完成，a对象在使用b对象，b对象使用c对象，a对象只需要使用b对象，而不需要了解b对象怎么怎么样创建出c对象。</p><h3 id="高耦合代码" tabindex="-1">高耦合代码 <a class="header-anchor" href="#高耦合代码" aria-label="Permalink to &quot;高耦合代码&quot;">​</a></h3><p>以下代码是没有依赖注入的情况，a对象要考虑b对象的参数，如果c对象也有参数也要考虑，这显然是高耦合低效率的编码体验。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class c {</span></span>
<span class="line"><span>  run() {</span></span>
<span class="line"><span>    console.log(&#39;c object&#39;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class b {</span></span>
<span class="line"><span>  constructor(private c) {}</span></span>
<span class="line"><span>  run() {</span></span>
<span class="line"><span>    this.c.run();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class a {</span></span>
<span class="line"><span>  constructor(private b) {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  run() {</span></span>
<span class="line"><span>    this.b.run();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const hd = new a(new b(new c()));</span></span>
<span class="line"><span>hd.run();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="依赖注入-1" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入-1" aria-label="Permalink to &quot;依赖注入&quot;">​</a></h3><p>NestJs将类定义在模块的 <strong>providers</strong> 属性中即声明为提供者，其他类可以在constructor构造函数中依赖注入，实现编码的解耦。</p><p>下面代码的构造函数使用依赖注入了PrismaService与JwtService服务实例。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Injectable()</span></span>
<span class="line"><span>export class AuthService {</span></span>
<span class="line"><span>  constructor(private readonly prismaService: PrismaService, private readonly jwtService: JwtService) {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  async login(loginDto: LoginDto) {</span></span>
<span class="line"><span>    const user = await this.prismaService.user.findUnique({</span></span>
<span class="line"><span>      where: {</span></span>
<span class="line"><span>        name: loginDto.name,</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    const passwordCheck = await argon2.verify(user.password, loginDto.password)</span></span>
<span class="line"><span>    if (!passwordCheck) throw new BadRequestException(&#39;密码输入错误&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return this.token(user)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><p><img src="`+i+'" alt="img"></p><p>一般来说，nest.js请求生命周期大致如下：</p><ol><li>收到请求</li><li>全局绑定的中间件</li><li>模块绑定的中间件</li><li>全局守卫</li><li>控制层守卫</li><li>路由守卫</li><li>全局拦截器（控制器之前）</li><li>控制器层拦截器 （控制器之前）</li><li>路由拦截器 （控制器之前）</li><li>全局管道</li><li>控制器管道</li><li>路由管道</li><li>路由参数管道</li><li>控制器（方法处理器）</li><li>路由拦截器（请求之后）</li><li>控制器拦截器 （请求之后）</li><li>全局拦截器 （请求之后）</li><li>异常过滤器 （路由，之后是控制器，之后是全局）</li><li>服务器响应</li></ol>',40)]))}const q=a(r,[["render",t]]);export{h as __pageData,q as default};
