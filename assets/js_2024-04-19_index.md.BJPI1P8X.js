import{_ as s,c as n,o as a,a5 as e,bJ as p}from"./chunks/framework.24MdQI4p.js";const h=JSON.parse('{"title":"大大提高开发效率的10个JavaScript技巧","description":"","frontmatter":{},"headers":[],"relativePath":"js/2024-04-19/index.md","filePath":"js/2024-04-19/index.md","lastUpdated":1713520108000}'),l={name:"js/2024-04-19/index.md"},r=e('<h1 id="大大提高开发效率的10个javascript技巧" tabindex="-1">大大提高开发效率的10个JavaScript技巧 <a class="header-anchor" href="#大大提高开发效率的10个javascript技巧" aria-label="Permalink to &quot;大大提高开发效率的10个JavaScript技巧&quot;">​</a></h1><p><img src="'+p+`" alt="img"></p><p>一位深漂的00后程序媛，校招拿了小米、富途等11家互联网公司offer，深知编码不易，故本公众号专注于分享编码经验、技术干货、面试经验，偶尔分享深漂日常、工作心得、实用书籍等，期待您的关注。</p><p>JavaScript 是前端开发中的必备语言。但是我发现很多同学对于 JavaScript 的技巧使用却并不熟悉。所以，今天咱们就来分享一下 JavaScript 的10个好用的技巧，帮你更好地使用 JavaScript，提升开发效率！</p><h2 id="_1-使用-flatmap" tabindex="-1"><strong>1. 使用 flatMap</strong> <a class="header-anchor" href="#_1-使用-flatmap" aria-label="Permalink to &quot;**1. 使用 flatMap**&quot;">​</a></h2><p>有些 <strong>JavaScript</strong> 方法尽管鲜为人知，但它们解决独特挑战的潜力能够增强编码效率， 比如 <code>flatMap()</code></p><p>数组方法 <code>flatMap()</code> 本质上是 <code>map()</code>和 <code>flat()</code> 的组合，区别在于 <code>flatMap</code> 只能扁平1级，flat 可以指定需要扁平的级数，flatmap 比分别调用这两个方法稍微高效一些。</p><ul><li>使用 <strong>flat + map</strong></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const arr = [1, 2, [4, 5], 6, 7, [8]];</span></span>
<span class="line"><span>// 使用 map 对每个元素进行操作并用 flat 展平结果</span></span>
<span class="line"><span>const result = arr.map(element =&gt; Array.isArray(element) ? element : [element]).flat();</span></span>
<span class="line"><span>console.log(result); // output: [1, 2, 4, 5, 6, 7, 8]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>使用 <strong>flatmap</strong></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const arr = [1, 2, [4, 5], 6, 7, [8]] ;</span></span>
<span class="line"><span>console.log(arr.flatMap((element) =&gt; element)); </span></span>
<span class="line"><span>// output :[1, 2, 4, 5, 6, 7, 8]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>flatmap 尽管是一个方法，但也会有 <strong>中间数组 (指中间创建了必须进行垃圾收集的临时数组)</strong>[1]的产生，flatMap 非常适合在需要灵活性和可读性的情况下使用。</p><h2 id="_2-console-的妙用" tabindex="-1"><strong>2. console 的妙用</strong> <a class="header-anchor" href="#_2-console-的妙用" aria-label="Permalink to &quot;**2. console 的妙用**&quot;">​</a></h2><p><strong>console</strong> 并不只有 <code>console.log()</code>, 实际生产中都会使用已经封装好的log库，而 <strong>控制台对象 console</strong> 实际上内置了许多非常有用的方法，帮助您提高调试输出的质量和可读性，掌握它们能使您更轻松地 <strong>debug</strong> 和修复代码中的问题。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 1. console.time 和 console.timeEnd</span></span>
<span class="line"><span>// 测量执行一段代码所需的时间。识别代码中的性能瓶颈并对其进行优化</span></span>
<span class="line"><span>console.time(&#39;开始获取数据&#39;);</span></span>
<span class="line"><span>fetch(&#39;https://reqres.in/api/users&#39;)</span></span>
<span class="line"><span> .then(response =&gt; response.json())</span></span>
<span class="line"><span> .then(data =&gt; {</span></span>
<span class="line"><span> console.timeEnd(&#39;获取数据花费时间：&#39;);</span></span>
<span class="line"><span> // ...code</span></span>
<span class="line"><span> });</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>// 2. console.dir</span></span>
<span class="line"><span>// console.dir 方法以分层格式输出对象的属性。方便查看对象的结构以及其所有属性和方法</span></span>
<span class="line"><span>const promise = new Promise((resolve, reject) =&gt; resolve(&#39;foo&#39;));</span></span>
<span class="line"><span>console.dir(promise);</span></span>
<span class="line"><span>// 3. console.count</span></span>
<span class="line"><span>// console.count 方法来计算特定日志消息的输出次数。这对于跟踪特定代码路径的执行次数以及识别代码中的热点非常有用</span></span>
<span class="line"><span>const fun = (x) =&gt; console.count(x);</span></span>
<span class="line"><span>fun(&#39;刻晴&#39;); // 1</span></span>
<span class="line"><span>fun(&#39;甘雨&#39;); // 1</span></span>
<span class="line"><span>fun(&#39;刻晴&#39;); // 2</span></span>
<span class="line"><span>// 4. console.trace</span></span>
<span class="line"><span>// trace 可以输出堆栈跟踪。对于理解代码中的执行流程以及识别特定日志消息的来源非常有用</span></span>
<span class="line"><span>const foo = () =&gt; console.trace();</span></span>
<span class="line"><span>const bar = () =&gt; foo();</span></span>
<span class="line"><span>bar();</span></span>
<span class="line"><span>// 5. console.profile profileEnd</span></span>
<span class="line"><span>// 测量代码块的性能。这对于识别性能瓶颈以及优化代码以提高速度和效率非常有用。</span></span>
<span class="line"><span>console.profile(&#39;MyProfile&#39;);</span></span>
<span class="line"><span>// 想要测量性能的代码</span></span>
<span class="line"><span>for (let i = 0; i &lt; 100000; i++) {</span></span>
<span class="line"><span> // ...code</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>console.profileEnd(&#39;MyProfile&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="_3-深拷贝-structuredclone" tabindex="-1"><strong>3. 深拷贝 structuredClone()</strong> <a class="header-anchor" href="#_3-深拷贝-structuredclone" aria-label="Permalink to &quot;**3. 深拷贝 structuredClone()**&quot;">​</a></h2><p>此前，如果开发人员想要深拷贝对象，经常需要依赖第三方库来实现或者手动实现一个神拷贝，或者采取 <code>const cloneObj = JSON.parse(JSON.stringify(obj));</code> 的 hack， 但其在处理<strong>包含循环引用</strong>或<strong>不符合 JSON 的数据类型（如 Map 和 Set，Blob 等 ）</strong> 的更复杂对象时，是有很多不足之处的</p><p>而现在，<strong>JavaScript</strong> 内置了一个 <strong>structuredClone()</strong> 的方法， 此方法提供了一种简单有效的方法来深度克隆对象， 且适用于大多数现代浏览器和 Node.js v17 以上</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 将原始对象传递给该函数， 它将返回一个具有不同引用和对象属性引用的深层副本</span></span>
<span class="line"><span>const obj = { name: &#39;Mike&#39;, friends: [{ name: &#39;Sam&#39; }] };</span></span>
<span class="line"><span>const clonedObj = structuredClone(obj);</span></span>
<span class="line"><span>console.log(obj.name === clonedObj); // false</span></span>
<span class="line"><span>console.log(obj.friends === clonedObj.friends); // false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>与众所周知的 <code>JSON.parse(JSON.stringify())”</code> 不同， <code>structuredClone()</code> 允许您克隆循环引用，这是目前在 <strong>JavaScript</strong> 中使用深拷贝最简单的方法。</p><h2 id="_4-带标签的模板" tabindex="-1"><strong>4. 带标签的模板</strong> <a class="header-anchor" href="#_4-带标签的模板" aria-label="Permalink to &quot;**4. 带标签的模板**&quot;">​</a></h2><blockquote><p>❝</p><p><strong>带标签的模板</strong>(<strong>Tagged_Templates</strong>[2]) - 是模板字符串(反引号)的一种更高级的形式，它允许你使用函数解析模板字面量。</p></blockquote><p>这个高级特性我也是在 <strong>Next.js 14</strong>[3] 发布后人们都在讨论的一张图才去了解的🫡，尽管这个特性是 <strong>ES6</strong> 就有的，至今已有<strong>8年</strong>！！！但我敢打赌知道这个并使用过这个特性的人屈指可数。</p><p>相信许多人已经见过下图(因为这个知识点请停止嘲笑 😝Next.js 14)， 相信许多人的第一反应就是回到二十年前 <strong>PHP</strong> 时代并且代码容易遭受 <strong>sql 注入攻击</strong> ， 但实际上是安全的。这得益于模板字符串的高级特性 - ( <strong>带标签的模板 -Tagged_Templates</strong>[4])</p><p>如果你不理解 <strong>Tagged_Templates</strong> 如何工作， 那么就让我用一个例子来简单说明下吧：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const checkCurrency = function (currency, amount) {</span></span>
<span class="line"><span> const symbol = currency[0] === &quot;USD&quot; ? &quot;$&quot; : &quot;¥&quot;;</span></span>
<span class="line"><span> console.log(currency[0], &quot;--&quot; ,currency[1])// Outputs: USD -- RMB</span></span>
<span class="line"><span> return \`\${symbol}\${amount}\`;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>const amount = 200;</span></span>
<span class="line"><span>const currency = checkCurrency\`USD\${amount}RMB\`;</span></span>
<span class="line"><span>console.log(currency); // Outputs: $200</span></span>
<span class="line"><span>// 1. checkCurrency是一个函数，标签函数的第一个参数currency包含一个字符串值数组</span></span>
<span class="line"><span>// 2. 字符串数组由标签模板里的字符串组成，在\`USD\${amount}RMB\`里，字符串有USD和RMB</span></span>
<span class="line"><span>// 3. 因此 currency[0] 为第一个字符串 USD， currency[1] 则是第二个字符串 RMB</span></span>
<span class="line"><span>// 3. checkCurrency函数的其余参数则根据表达式直接插入到字符串中，如 amount = 200</span></span>
<span class="line"><span>// 4. 在checkCurrency函数的内部，判断第一个参数数组首项是否是‘USD’，是则选择&quot;$&quot;符号，否则是 &quot;¥&quot;</span></span>
<span class="line"><span>// 5. 函数内部将symbol和amount结合在一起返回一个新的字符串，symbol代表货币符号，而amount代表传递给函数的金额。</span></span>
<span class="line"><span>// 6. 返回的字符串赋值给 currency 常量， 因此 log为 $200</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>可以看到，<strong>Tagged Templates</strong> 的工作方式是将模板字符串里的所有字符串作为一个数组传递给函数的第一个参数，其余参数则根据相应的表达式直接插入到字符串中，<strong>Tagged Templates</strong>将 文字字符串 和表达式的结果 传递给函数，然后该函数可以以自定义方式操作并返回它们。这样开发者在构建 SQL 查询时，<code>对输入进行适当的转义和验证，从而避免 SQL 注入攻击</code>。</p><p><strong>带标签的模板字符串</strong>可用于很多用途，例如 <strong>安全性</strong>、<strong>i18n和本地化</strong> 等。</p><h2 id="_5-使用symbols作为weakmap的键" tabindex="-1"><strong>5. 使用Symbols作为WeakMap的键</strong> <a class="header-anchor" href="#_5-使用symbols作为weakmap的键" aria-label="Permalink to &quot;**5. 使用Symbols作为WeakMap的键**&quot;">​</a></h2><p><code>WeakMap</code> 和 <code>Map</code> 很像，但不同点在于它的<strong>键(key)</strong> 只能是<strong>对象 Objects 和 symbol</strong>，这些键被作为<strong>弱引用存储(weakly)</strong>。</p><p>为什么？因为 <strong>WeakMap</strong> 的键必须是可垃圾回收的。大多数原始数据类型可以任意创建并且没有生命周期，因此它们不能用作键, 而 <strong>对象Objects</strong> 和 <strong>non-registered symbols</strong> 可以用作键，因为它们是垃圾可收集的 - <strong>MDN- WeakMap</strong>[5]。</p><blockquote><p>❝</p><p>这个特性意味着除了键之外内存中没有其他对对象的引用，<strong>JavaScript</strong> 引擎可以在需要时<strong>对对象执行垃圾回收</strong>。</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// map</span></span>
<span class="line"><span>let user = { name: &quot;User&quot; };</span></span>
<span class="line"><span>let map = new Map();</span></span>
<span class="line"><span>map.set(user, &quot;刻晴&quot;);</span></span>
<span class="line"><span>user = null; // 置null来覆盖引用，&#39;user&#39;被存在 map 的内部，通过 map.keys() 获取</span></span>
<span class="line"><span>// WeakMap</span></span>
<span class="line"><span>let user = { name: &quot;User&quot; };</span></span>
<span class="line"><span>let weakMap = new WeakMap();</span></span>
<span class="line"><span>weakMap.set(user, &quot;甘雨&quot;);</span></span>
<span class="line"><span>user = null; // 使用 WeakMap，&#39;user&#39; 已经被从内存中删除</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>好了，那 <strong>WeakMap</strong> 到底有什么作用呢？根据其特点可以联想到 <strong>WeakMap</strong> 的用途可以是<code>自定义缓存</code>以及<code>检测内存泄漏</code>。</p><p>通过使用对象作为键，您可以将缓存的值与特定对象相关联。当对象被垃圾收集时，相应的 <strong>WeakMap</strong> 条目将被自动删除，立即清除缓存。</p><p>在 <strong>ES14</strong> 中， 使用 <strong>symbol</strong> 作为 <strong>WeakMap</strong> 的 <strong>key</strong> 已经成为可能， 这可以使<strong>键值对</strong>在 <strong>WeakMap</strong> 中扮演的角色更加清晰。因为<strong>唯一能在 WeakMap 中被作为 key 使用的原始类型只有 symbol</strong>， <strong>symbol</strong> 能保证 <strong>key</strong> 是 唯一的并且无法重新创建。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mySymbol = Symbol(&#39;mySymbol&#39;);</span></span>
<span class="line"><span>let myWeakMap = new WeakMap();</span></span>
<span class="line"><span>let obj = {</span></span>
<span class="line"><span> name: &#39;写前端的刻猫猫&#39;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>myWeakMap.set(mySymbol, obj);</span></span>
<span class="line"><span>console.log(myWeakMap.get(mySymbol)); // Output: {name: &#39;写前端的刻猫猫&#39;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_6-充分使用-generator" tabindex="-1"><strong>6. 充分使用 generator</strong> <a class="header-anchor" href="#_6-充分使用-generator" aria-label="Permalink to &quot;**6. 充分使用 generator**&quot;">​</a></h2><p><strong>生成器 (Generator)</strong> 和 <strong>迭代器 (iterators)</strong> 可能是 <strong>JavaScript</strong> 开发人员最不常使用的代码，其知识仅限于编码面试。（因为有更好用的语法糖 <code>async/await</code> ？😂）</p><blockquote><p>❝</p><p><strong>生成器 (Generator)</strong> 是控制异步编程、生成可迭代对象和生成多个值的强大方法。生成器与传统函数不同。他们可以多次启动和停止执行。这使它们能够产生大量值并在以后继续执行，从而使它们非常适合管理异步操作、构造迭代器和处理无尽的数据流。</p></blockquote><p>试想一下，假如在一个获取数据的场景下，<strong>数据库/ API 的数据量可能是无限的</strong>，而你必须将它们传输到前端，你会怎么做呢？</p><p>这种情况下， <strong>react</strong> 中最常用的方案就是无限加载方案， 如果是<strong>在 node 中</strong>或者<strong>原生JS</strong>，你该如何实现<strong>无限加载之类的功能</strong>。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>async function *fetchProducts(){</span></span>
<span class="line"><span> while (true){</span></span>
<span class="line"><span> const productUrl = &quot;https://fakestoreapi.com/products?limit=2&quot;;</span></span>
<span class="line"><span> const res = await fetch(productUrl)</span></span>
<span class="line"><span> const data = await res.json()</span></span>
<span class="line"><span> yield data;</span></span>
<span class="line"><span> // 在这里操作用户界面</span></span>
<span class="line"><span> // 或将其保存在数据库或其他地方</span></span>
<span class="line"><span> // 将其用作副作用的地方</span></span>
<span class="line"><span> // 即使某些条件匹配，也中断流程</span></span>
<span class="line"><span> }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>async function main() {</span></span>
<span class="line"><span> const itr = fetchProducts();</span></span>
<span class="line"><span> // 这应该根据用户交互来调用</span></span>
<span class="line"><span> // 或者其他技巧，因为您不希望出现无限加载。</span></span>
<span class="line"><span> console.log( await itr.next() );</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>return main()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>这就是 <strong>迭代器 (iterators)</strong> 真正有用的地方，而不是将请求的大量数据流式传输到本地存储或者某些位置。这是使用 <strong>异步生成器(async generators)</strong> 执行此操作的这样之一， 这样我们就可以解决JS中的无限加载问题。</p><h2 id="_7-私有类字段" tabindex="-1"><strong>7. 私有类字段</strong> <a class="header-anchor" href="#_7-私有类字段" aria-label="Permalink to &quot;**7. 私有类字段**&quot;">​</a></h2><p>现在，JavaScript类支持使用#符号的私有字段。</p><p>私有字段不能从类外部访问，从而提供封装和信息隐藏。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>class Counter {</span></span>
<span class="line"><span>  #count = 0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  increment() {</span></span>
<span class="line"><span>    this.#count++;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  getCount() {</span></span>
<span class="line"><span>    return this.#count;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const counter = new Counter();</span></span>
<span class="line"><span>counter.increment();</span></span>
<span class="line"><span>console.log(counter.getCount()); // 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_8-promise-allsettled" tabindex="-1"><strong>8. Promise.allSettled()</strong> <a class="header-anchor" href="#_8-promise-allsettled" aria-label="Permalink to &quot;**8. Promise.allSettled()**&quot;">​</a></h2><p>Promise.allSettled() 方法返回一个 Promise，该 Promise 在所有给定的 Promise 已经 resolve 或 reject 后 resolve，提供每个 Promise 的结果数组。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const promises = [</span></span>
<span class="line"><span>  Promise.resolve(&#39;Resolved&#39;),</span></span>
<span class="line"><span>  Promise.reject(&#39;Rejected&#39;)</span></span>
<span class="line"><span>];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Promise.allSettled(promises)</span></span>
<span class="line"><span>  .then(results =&gt; {</span></span>
<span class="line"><span>    console.log(results);</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>// [{ status: &quot;fulfilled&quot;, value: &quot;Resolved&quot; }, { status: &quot;rejected&quot;, reason: &quot;Rejected&quot; }]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_9-globalthis-全局对象" tabindex="-1"><strong>9. globalThis 全局对象</strong> <a class="header-anchor" href="#_9-globalthis-全局对象" aria-label="Permalink to &quot;**9. globalThis 全局对象**&quot;">​</a></h2><p>globalThis对象提供了一种在不同环境下（包括浏览器和Node.js）访问全局对象的一致方式。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>console.log(globalThis === window); // 在浏览器场景下: true</span></span>
<span class="line"><span>console.log(globalThis === global); // 在 Node.js 中: outputs: true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_10-代理" tabindex="-1"><strong>10. 代理</strong> <a class="header-anchor" href="#_10-代理" aria-label="Permalink to &quot;**10. 代理**&quot;">​</a></h2><p>代理对象允许你为基本对象操作创建自定义行为。</p><p>它允许截获和修改对象操作，例如访问属性、赋值和调用方法。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const handler = {</span></span>
<span class="line"><span>  get: function (obj, prop) {</span></span>
<span class="line"><span>    return prop in obj ? obj[prop] : 37;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const p = new Proxy({}, handler);</span></span>
<span class="line"><span>p.a = 1;</span></span>
<span class="line"><span>p.b = undefined;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(p.a, p.b); // 1, undefined</span></span>
<span class="line"><span>console.log(&quot;c&quot; in p, p.c); // false, 37</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>Reference</strong></p><p>[1]</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap#description:" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap#description:</a> <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArray%2FflatMap%23description" target="_blank" rel="noreferrer">https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArray%2FflatMap%23description</a></p><p>[2]</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates:" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates:</a> <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FTemplate_literals%23tagged_templates" target="_blank" rel="noreferrer">https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FTemplate_literals%23tagged_templates</a></p><p>[3]</p><p><a href="https://nextjs.org/:" target="_blank" rel="noreferrer">https://nextjs.org/:</a> <a href="https://link.juejin.cn?target=https%3A%2F%2Fnextjs.org%2F" target="_blank" rel="noreferrer">https://link.juejin.cn?target=https%3A%2F%2Fnextjs.org%2F</a></p><p>[4]</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates:" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates:</a> <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FTemplate_literals%23tagged_templates" target="_blank" rel="noreferrer">https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FTemplate_literals%23tagged_templates</a></p><p>[5]</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap:" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap:</a> <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FWeakMap" target="_blank" rel="noreferrer">https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FWeakMap</a></p>`,69),t=[r];function o(i,c,b,u,m,d){return a(),n("div",null,t)}const v=s(l,[["render",o]]);export{h as __pageData,v as default};
