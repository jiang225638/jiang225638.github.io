import{_ as s,c as a,o as n,a4 as e}from"./chunks/framework.DaHLRe2H.js";const h=JSON.parse('{"title":"prisma","description":"","frontmatter":{},"headers":[],"relativePath":"nestjs/prisma/index.md","filePath":"nestjs/prisma/index.md","lastUpdated":1713787480000}'),p={name:"nestjs/prisma/index.md"},l=e(`<h1 id="prisma" tabindex="-1">prisma <a class="header-anchor" href="#prisma" aria-label="Permalink to &quot;prisma&quot;">​</a></h1><h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h2><p>Prisma 可以方便的管理数据表，包含数据迁移、数据填充、查询生成器等好用的功能。</p><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><p>使用 prisma 需要大量网络下载，所以建议使用 [nrm] 设置合适的源，来提高下载速度。你可以通过<a href="https://prisma.yoga/getting-started" target="_blank" rel="noreferrer">prisma</a>官网或<a href="https://docs.nestjs.com/recipes/prisma" target="_blank" rel="noreferrer">nestjs文档</a>查看更多内容。</p><p>安装 Prisma CLI等扩展包</p><ul><li>使用<a href="http://mockjs.com/examples.html" target="_blank" rel="noreferrer">mockjs</a>生成随机数据</li><li>使用 <a href="https://www.npmjs.com/package/argon2" target="_blank" rel="noreferrer">argon2</a> 加密密码</li></ul><p>安装所需的包</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm add prisma-binding @prisma/client mockjs argon2</span></span>
<span class="line"><span>pnpm add -D prisma typescript @types/node @types/mockjs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="数据库连接" tabindex="-1">数据库连接 <a class="header-anchor" href="#数据库连接" aria-label="Permalink to &quot;数据库连接&quot;">​</a></h3><p>执行以上命令后初始化prisma</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx prisma init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>会创建<code>.env</code>文件与<code>prisma</code>文件夹</p><ul><li>.env 用于定义数据库连接</li><li>prisma用于定义模型结构与数据迁移与数据填充文件</li></ul><p>修改<code>.env</code>文件设置mysql连接，以下连接请根据你的情况修改</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DATABASE_URL=&quot;mysql://root:admin888@127.0.0.1:3306/nest&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="vscode-https-doc-houdunren-com-系统课程-nestjs-5-prisma-html-vscode" tabindex="-1">vscode[](<a href="https://doc.houdunren.com/%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B/NestJs/5" target="_blank" rel="noreferrer">https://doc.houdunren.com/系统课程/NestJs/5</a> prisma.html#vscode) <a class="header-anchor" href="#vscode-https-doc-houdunren-com-系统课程-nestjs-5-prisma-html-vscode" aria-label="Permalink to &quot;vscode[](https://doc.houdunren.com/系统课程/NestJs/5 prisma.html#vscode)&quot;">​</a></h3><p>推荐使用 vscode 进行开发学习，你需要安装 <a href="https://marketplace.visualstudio.com/items?itemName=Prisma.prisma" target="_blank" rel="noreferrer">prisma</a> 插件，使用编辑器拥有自动提示功能。</p><h2 id="迁移文件" tabindex="-1">迁移文件 <a class="header-anchor" href="#迁移文件" aria-label="Permalink to &quot;迁移文件&quot;">​</a></h2><p>迁移文件migrate用于构建数据表结构变化，他是数据库的版本控制机制，每次表结构的修改都有单独文件记录。</p><h3 id="结构定义" tabindex="-1">结构定义 <a class="header-anchor" href="#结构定义" aria-label="Permalink to &quot;结构定义&quot;">​</a></h3><p>在 <code>prisman/schema.prisma</code> 文件内定义表结构，你可以查看<a href="https://prisma.yoga/concepts/components/prisma-schema/data-model#%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">数据模型</a> 或 <a href="https://prisma.yoga/reference/api-reference/prisma-schema-reference#model-%E5%AD%97%E6%AE%B5" target="_blank" rel="noreferrer">字段类型</a> 文档了解使用方法。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>generator client {</span></span>
<span class="line"><span>  provider = &quot;prisma-client-js&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>datasource db {</span></span>
<span class="line"><span>  provider = &quot;mysql&quot;</span></span>
<span class="line"><span>  url      = env(&quot;DATABASE_URL&quot;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>model user {</span></span>
<span class="line"><span>	//BigInt类型	主键 自增值	非负BitInt</span></span>
<span class="line"><span>  id       BigInt    @id @default(autoincrement()) @db.UnsignedBigInt()</span></span>
<span class="line"><span>  //字符串，默认为varchar(191)</span></span>
<span class="line"><span>  email    String</span></span>
<span class="line"><span>  password String</span></span>
<span class="line"><span>  //添加时自动设置时间，即设置Mysql默认值为CURRENT_TIMESTAMP</span></span>
<span class="line"><span>  createdAt DateTime @default(now())</span></span>
<span class="line"><span>  // 让Prisma在添加与更新时自动维护该字段</span></span>
<span class="line"><span>  updatedAt DateTime @updatedAt</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>model category {</span></span>
<span class="line"><span>  id       Int       @id @default(autoincrement()) @db.UnsignedInt()</span></span>
<span class="line"><span>  title    String</span></span>
<span class="line"><span>  articles article[]</span></span>
<span class="line"><span>  created_at DateTime @default(now())</span></span>
<span class="line"><span>  updated_at DateTime @updatedAt</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>model article {</span></span>
<span class="line"><span>  id         Int      @id @default(autoincrement()) @db.UnsignedInt()</span></span>
<span class="line"><span>  title      String</span></span>
<span class="line"><span>  content    String   @db.Text()</span></span>
<span class="line"><span>  //类型category	关联定义(本表字段catgoryId,关联category表id,主表记录删除时同时删除关联表数据）</span></span>
<span class="line"><span>  category   category @relation(fields: [categoryId], references: [id], onDelete: Cascade)</span></span>
<span class="line"><span>  categoryId Int      @db.UnsignedInt()</span></span>
<span class="line"><span>  created_at DateTime @default(now())</span></span>
<span class="line"><span>  updated_at DateTime @updatedAt</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>执行以下命令，将自动根据已经存在的数据库生成文件 <code>prisman/schema.prisma</code> ，而不需要向上面一样手动定义。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx prisma db pull</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="生成迁移" tabindex="-1">生成迁移 <a class="header-anchor" href="#生成迁移" aria-label="Permalink to &quot;生成迁移&quot;">​</a></h3><p>当创建好结构定义后，执行以下命令会在<code>prisma/migrations</code> 目录生成迁移文件，同时在数据库中创建表。</p><ul><li>这时数据表也已经创建了</li><li>数据库中会有表 <code>_prisma_migrations</code> 记录了迁移文件</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx prisma migrate dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以下命令执行动作为：</p><ul><li>根据定义生成迁移文件</li><li>执行新的迁移文件修改数据表</li><li>生成 Prisma Client</li></ul><h3 id="重置数据库" tabindex="-1">重置数据库 <a class="header-anchor" href="#重置数据库" aria-label="Permalink to &quot;重置数据库&quot;">​</a></h3><p>我们也可以执行以下命令重置数据库</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx prisma migrate reset</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以下命令执行动作为：</p><ul><li>删除数据库</li><li>创建数据库</li><li>执行所有迁移文件</li><li>运行 seed 数据填充</li></ul><h2 id="查询构造器" tabindex="-1">查询构造器 <a class="header-anchor" href="#查询构造器" aria-label="Permalink to &quot;查询构造器&quot;">​</a></h2><p>当执行 prisma migrate dev 后，系统会生成针对于每个表的查询构建器 <code>PrismaClient</code>。</p><ul><li>查询构造器提供众多方法完成对数据的增删改查</li><li>你可以查看文档 <a href="https://prisma.yoga/concepts/components/prisma-client" target="_blank" rel="noreferrer">prisma-client</a> 了解详细使用</li></ul><p>下面在中创建文件<code>hd.ts</code>，用于测试查询构造器，内容如下</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { PrismaClient } from &#39;@prisma/client&#39;</span></span>
<span class="line"><span>const prisma = new PrismaClient()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Promise.resolve().then(async () =&gt; {</span></span>
<span class="line"><span>  const user = await prisma.user.findFirst()</span></span>
<span class="line"><span>  console.log(user)</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>需要安装以下命令完成测试</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm add -g nodemon ts-node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后执行命令查看结果</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nodemon hd.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="数据填充" tabindex="-1">数据填充 <a class="header-anchor" href="#数据填充" aria-label="Permalink to &quot;数据填充&quot;">​</a></h2><p><a href="https://prisma.yoga/guides/database/seed-database" target="_blank" rel="noreferrer">数据填充</a> 一般用于在开发时添加测试数据，我们会使用prisma的 <a href="https://prisma.yoga/concepts/components/prisma-client" target="_blank" rel="noreferrer">prisma-client</a> 查询构造器进入数据添加。</p><h3 id="环境配置" tabindex="-1">环境配置 <a class="header-anchor" href="#环境配置" aria-label="Permalink to &quot;环境配置&quot;">​</a></h3><p>同时为了生成随机数据需要安装 <a href="http://mockjs.com/" target="_blank" rel="noreferrer">mockjs</a>。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm add mockjs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>首先在package.json中定义命令，后面可以调用 <code>npx prisma db seed</code> 命令实现填充</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;nest&quot;,</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>  &quot;prisma&quot;: {</span></span>
<span class="line"><span>    &quot;seed&quot;: &quot;ts-node prisma/seed.ts&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;scripts&quot;: {</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>然后你需要创建<code>prisma/seeds</code>目录 ，该目录用于定义数据填充文件。</p><h3 id="代码逻辑" tabindex="-1">代码逻辑 <a class="header-anchor" href="#代码逻辑" aria-label="Permalink to &quot;代码逻辑&quot;">​</a></h3><p>创建帮助函数 <code>prisma/helper.ts</code>，并实现create方法用于批量执行填充动作。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export default async function create(</span></span>
<span class="line"><span>  count = 10,</span></span>
<span class="line"><span>  callback: () =&gt; Promise&lt;void&gt;,</span></span>
<span class="line"><span>) {</span></span>
<span class="line"><span>	const prisma = new PrismaClient();</span></span>
<span class="line"><span>  for (let i = 1; i &lt;= count; i++) {</span></span>
<span class="line"><span>    await callback(prisma);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接着定义<code>seeds/user.ts</code>文件用于定义user表的数据</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { PrismaClient } from &#39;@prisma/client&#39;;</span></span>
<span class="line"><span>import { Random } from &#39;mockjs&#39;;</span></span>
<span class="line"><span>import { hash } from &#39;argon2&#39;;</span></span>
<span class="line"><span>import create from &#39;../helper&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default () =&gt; {</span></span>
<span class="line"><span>  create(10, async (prisma:PrismaClient) =&gt; {</span></span>
<span class="line"><span>    await prisma.user.create({</span></span>
<span class="line"><span>      data: {</span></span>
<span class="line"><span>        email: Random.email(),</span></span>
<span class="line"><span>        password: await hash(Random.sentence()),</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>然后创建文件 prisma/seed.ts ，这个文件是执行<code>npx prisma db seed</code>命令时调用的</p><ul><li>因为有些表需要其他表先创建，所以定义bootstrap方法，使用await 让他们按顺序执行</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { UserSeed } from &#39;./seeds/user&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function run() {</span></span>
<span class="line"><span>  UserSeed(10)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>run()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="填充命令" tabindex="-1">填充命令 <a class="header-anchor" href="#填充命令" aria-label="Permalink to &quot;填充命令&quot;">​</a></h3><p>现在执行命令就可以有填充数据了</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx prisma db seed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行以下命令会自动执行数据填充</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx prisma migrate reset</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="外键约束" tabindex="-1">外键约束 <a class="header-anchor" href="#外键约束" aria-label="Permalink to &quot;外键约束&quot;">​</a></h3><p>如果数据表有外键依赖时，需要保证被依赖的表先创建。这时需要使用<strong>await</strong> 函数阻塞异步执行。</p><p>首先修改 <strong>seed.ts</strong> 文件，让调用的填充文件阻塞执行</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { UserSeed } from &#39;./seeds/user&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>async function run() {</span></span>
<span class="line"><span>   await UserSeed(10)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>run()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>接着修改 <strong>UserSeed.ts</strong> 文件，将函数定义为 <strong>async/await</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...</span></span>
<span class="line"><span>export default async() =&gt; {</span></span>
<span class="line"><span>	await create(10, async (prisma:PrismaClient) =&gt; {</span></span>
<span class="line"><span>    await prisma.user.create({</span></span>
<span class="line"><span>      data: {</span></span>
<span class="line"><span>        email: Random.email(),</span></span>
<span class="line"><span>        password: await hash(Random.sentence()),</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><p>创建迁移文件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm prisma migrate dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>重置迁移并执行数据，同时会执行数据填充</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm prisma migrate reset</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行数据填充</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm prisma db seed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="定义模块" tabindex="-1">定义模块 <a class="header-anchor" href="#定义模块" aria-label="Permalink to &quot;定义模块&quot;">​</a></h2><p>下面我们在项目代码中使用prisma，首先创建 prisma 模块。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nest g mo prisma</span></span>
<span class="line"><span>nest g s prisma</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="提供者-log" tabindex="-1">提供者/LOG <a class="header-anchor" href="#提供者-log" aria-label="Permalink to &quot;提供者/LOG&quot;">​</a></h3><p>创建 <strong>prisma/prisma.service.ts</strong> 服务文件，同时将在文件中定义 <a href="https://prisma.yoga/concepts/components/prisma-client/working-with-prismaclient/logging" target="_blank" rel="noreferrer">日志记录</a> 。</p><ul><li>当为开发环境时，终端输入查询SQL</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { Injectable } from &#39;@nestjs/common&#39;</span></span>
<span class="line"><span>import { ConfigService } from &#39;@nestjs/config&#39;</span></span>
<span class="line"><span>import { PrismaClient } from &#39;@prisma/client&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Injectable()</span></span>
<span class="line"><span>export class PrismaService extends PrismaClient {</span></span>
<span class="line"><span>  constructor(configService: ConfigService) {</span></span>
<span class="line"><span>  	//输出查询SQL等LOG</span></span>
<span class="line"><span>    super(configService.get(&#39;app.isDev&#39;) ? { log: [&#39;query&#39;, &#39;info&#39;, &#39;warn&#39;, &#39;error&#39;] } : undefined)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>然后设置模块 <strong>prisma/prisma.module.ts</strong> 注册提供者，并使用exports选项向外部提供 <strong>PrismaService</strong> 服务</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { Global, Module } from &#39;@nestjs/common&#39;;</span></span>
<span class="line"><span>import { PrismaService } from &#39;./prisma.service&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Global()</span></span>
<span class="line"><span>@Module({</span></span>
<span class="line"><span>  providers: [PrismaService],</span></span>
<span class="line"><span>  exports: [PrismaService],</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>export class PrismaModule {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>然后在根模块 <strong>app.module.ts</strong> 中注册</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { PrismaModule } from &#39;./prisma/prisma.module&#39;;</span></span>
<span class="line"><span>import { Module } from &#39;@nestjs/common&#39;;</span></span>
<span class="line"><span>import { AppController } from &#39;./app.controller&#39;;</span></span>
<span class="line"><span>import { AppService } from &#39;./app.service&#39;;</span></span>
<span class="line"><span>import { UserModule } from &#39;./user/user.module&#39;;</span></span>
<span class="line"><span>import { AuthModule } from &#39;./auth/auth.module&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Module({</span></span>
<span class="line"><span>  imports: [UserModule, AuthModule, PrismaModule],</span></span>
<span class="line"><span>  controllers: [AppController],</span></span>
<span class="line"><span>  providers: [AppService],</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>export class AppModule {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="使用-https-doc-houdunren-com-系统课程-nestjs-5-prisma-html-使用" tabindex="-1">使用[](<a href="https://doc.houdunren.com/%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B/NestJs/5" target="_blank" rel="noreferrer">https://doc.houdunren.com/系统课程/NestJs/5</a> prisma.html#使用) <a class="header-anchor" href="#使用-https-doc-houdunren-com-系统课程-nestjs-5-prisma-html-使用" aria-label="Permalink to &quot;使用[](https://doc.houdunren.com/系统课程/NestJs/5 prisma.html#使用)&quot;">​</a></h3><p>现在其他模块也可以使用 <strong>PrismaService</strong> 服务了</p><ul><li>因为prisma模块已经注册全局，所以其他模块不需要import</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { PrismaService } from &#39;./../prisma/prisma.service&#39;;</span></span>
<span class="line"><span>import { Injectable, ForbiddenException } from &#39;@nestjs/common&#39;;</span></span>
<span class="line"><span>import { CreateAuthDto } from &#39;./dto/create-auth.dto&#39;;</span></span>
<span class="line"><span>import * as argon2 from &#39;argon2&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Injectable()</span></span>
<span class="line"><span>export class AuthService {</span></span>
<span class="line"><span>  constructor(private readonly prisma: PrismaService) {}</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><ol><li><p>当prisma出错异常时，你可以删除prisma迁移文件</p><p>你可以删除数据库所有表，和项目中的 <code>prisma/migrations</code> 目录，将prisma初始到最干净的状态</p></li></ol>`,96),i=[l];function r(t,c,o,d,m,b){return n(),a("div",null,i)}const g=s(p,[["render",r]]);export{h as __pageData,g as default};
