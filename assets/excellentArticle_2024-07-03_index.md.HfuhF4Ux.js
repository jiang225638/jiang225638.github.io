import{_ as s,c as n,o as a,a5 as e}from"./chunks/framework.BXMMEvbx.js";const p="/jiang225638.github.io/assets/excellentArticle/2024-07-03/640.webp",g=JSON.parse('{"title":"不要再写满屏import导入啦！","description":"","frontmatter":{},"headers":[],"relativePath":"excellentArticle/2024-07-03/index.md","filePath":"excellentArticle/2024-07-03/index.md","lastUpdated":1719993428000}'),l={name:"excellentArticle/2024-07-03/index.md"},r=e(`<h1 id="不要再写满屏import导入啦" tabindex="-1">不要再写满屏import导入啦！ <a class="header-anchor" href="#不要再写满屏import导入啦" aria-label="Permalink to &quot;不要再写满屏import导入啦！&quot;">​</a></h1><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><p>密密麻麻的import语句不仅仅是一种视觉上的冲击，更是对代码组织结构的一种考验。</p><p>我们是如何做到让import“占领满屏“的了，又该如何优雅地管理这些import语句呢？</p><p>本文将从产生大量import语句的原因、可能带来的问题以及如何优化和管理import语句几个角度来进行探讨。</p><h2 id="import是如何-占领满屏-的" tabindex="-1"><strong>import是如何“占领满屏“的？</strong> <a class="header-anchor" href="#import是如何-占领满屏-的" aria-label="Permalink to &quot;**import是如何“占领满屏“的？**&quot;">​</a></h2><h3 id="拒绝-使用模块重导-re-export" tabindex="-1">*<strong>拒绝*使用模块重导（*<em>Re-export*</em>）</strong> <a class="header-anchor" href="#拒绝-使用模块重导-re-export" aria-label="Permalink to &quot;***拒绝\\*使用模块重导（\\**Re-export\\**）**&quot;">​</a></h3><p>模块重导是一种通用的技术。在腾讯、字节、阿里等各大厂的组件库中都有大量使用。</p><p>如：字节的<code>arco-design</code>组件库中的组件：<strong>github.com/arco-design…</strong>[1]</p><p>通过重导在<code>comonents/index.tsx</code>文件暴露所有组件，在使用时<strong>一个import</strong>就可以使用N个组件了。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 不使用重导</span></span>
<span class="line"><span>import Modal from &#39;@arco-design/web-react/es/Modal&#39;</span></span>
<span class="line"><span>import Checkbox from &#39;@arco-design/web-react/es/Checkbox&#39;</span></span>
<span class="line"><span>import Message from &#39;@arco-design/web-react/es/Message&#39;</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用模块重导</span></span>
<span class="line"><span>import { Modal, Checkbox, Message} from &#39;@arco-design/web-react&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="`+p+`" alt="medium-zoom"></p><p><strong>Re-export</strong>一般用于收拢同类型的模块、一般都是以文件夹为单位，如<code>components、routes、utils、hooks、stories</code>等都通过各自的index.tsx暴露，这样就能极大程度的<strong>简化导入路径、提升代码可读性、可维护性</strong>。</p><p><strong>Re-export的几种形式</strong></p><h4 id="_1-直接重导出" tabindex="-1"><strong>1. 直接重导出</strong> <a class="header-anchor" href="#_1-直接重导出" aria-label="Permalink to &quot;**1. 直接重导出**&quot;">​</a></h4><p>直接从另一个模块重导出特定的成员。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export { foo, bar } from &#39;./moduleA&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-重命名并重导出-含默认导出" tabindex="-1"><strong>2. 重命名并重导出（含默认导出）</strong> <a class="header-anchor" href="#_2-重命名并重导出-含默认导出" aria-label="Permalink to &quot;**2. 重命名并重导出（含默认导出）**&quot;">​</a></h4><p>从另一个模块导入成员，可能会重命名它们，然后再导出。</p><p>默认导出也可以重命名并重导出</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 通过export导出的</span></span>
<span class="line"><span>export { foo as newFoo, bar as newBar } from &#39;./moduleA&#39;;</span></span>
<span class="line"><span>// 通过export default导出的</span></span>
<span class="line"><span>export { default as ModuleDDefault } from &#39;./moduleD&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3-重导出整个模块-不含默认导出" tabindex="-1"><strong>3. 重导出整个模块（不含默认导出）</strong> <a class="header-anchor" href="#_3-重导出整个模块-不含默认导出" aria-label="Permalink to &quot;**3. 重导出整个模块（不含默认导出）**&quot;">​</a></h4><p>将另一个模块的所有导出成员作为单个对象重导出。（注意：整个导出不会包含export default）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export * from &#39;./moduleA&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_4-收拢、结合导入与重导出" tabindex="-1"><strong>4. 收拢、结合导入与重导出</strong> <a class="header-anchor" href="#_4-收拢、结合导入与重导出" aria-label="Permalink to &quot;**4. 收拢、结合导入与重导出**&quot;">​</a></h4><p>首先导入模块中的成员，然后使用它们，最后将其重导出。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { foo, bar } from &#39;./moduleA&#39;;</span></span>
<span class="line"><span>export { foo, bar };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>通过这些形式，我们可以灵活地组织和管理代码模块。每种形式都有其适用场景，选择合适的方式可以帮助我们构建出更清晰、更高效的代码结构。</p><h3 id="从不-使用require-context" tabindex="-1">*<strong>从不*使用require.context</strong> <a class="header-anchor" href="#从不-使用require-context" aria-label="Permalink to &quot;***从不\\*使用require.context**&quot;">​</a></h3><p><strong><code>require.context</code></strong> 是一个非常有用的功能，它允许我们动态地导入一组模块，而不需要显式地一个接一个地导入。</p><p>只需一段代码让你<strong>只管增加文件、组件</strong>,将自动收拢重导。</p><p>在项目路由、状态管理等固定场景下<strong>极其好使</strong>（能提效、尽可能避免了增加一个配置要动N个文件的情况）</p><p><strong>尤其是在配置路由时</strong>、产生大批量的import（多少个页面就得导入多少个import😅）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 不使用require.context</span></span>
<span class="line"><span>import A form &#39;@/pages/A&#39;</span></span>
<span class="line"><span>import B form &#39;@/pages/B&#39;</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// routes/index.ts文件统一处理</span></span>
<span class="line"><span>// 创建一个context来导入routes目录下所有的 .ts 文件</span></span>
<span class="line"><span>const routesContext = require.context(&#39;./routes&#39;, false, /.ts$/);</span></span>
<span class="line"><span>const routes = [];</span></span>
<span class="line"><span>// 遍历 context 中的每个模块</span></span>
<span class="line"><span>routesContext.keys().forEach(modulePath =&gt; {</span></span>
<span class="line"><span>  // 获取模块的导出</span></span>
<span class="line"><span>  const route = routesContext(modulePath);</span></span>
<span class="line"><span>  // 获取组件名称【如果需要话】，例如：从 &quot;./Header.ts&quot; 提取 &quot;Header&quot;</span></span>
<span class="line"><span>  // const routeName = modulePath.replace(/^./(.*).\\w+$/, &#39;$1&#39;);</span></span>
<span class="line"><span>  // 将组件存储在组件对象中</span></span>
<span class="line"><span>  routes.push(route.default || route)</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default routes;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>在大项目、多路由的情况下，使用 <strong><code>require.context</code></strong> 在处理路由导入上<strong>大有可为</strong>。</p><h3 id="从不-使用import动态导入" tabindex="-1">*<strong>从不*使用import动态导入</strong> <a class="header-anchor" href="#从不-使用import动态导入" aria-label="Permalink to &quot;***从不\\*使用import动态导入**&quot;">​</a></h3><p>动态import也能实现类似<code>require.context</code>的功能、动态收拢模块。关于<code>import</code>动态导入的更多内容可以看下这篇文章内的介绍**《如何在Vite5➕React➕Ts项目中优雅的使用Mock数据？》**[2]</p><h3 id="对provideplugin-不感兴趣" tabindex="-1"><strong>对ProvidePlugin*不感兴趣*</strong> <a class="header-anchor" href="#对provideplugin-不感兴趣" aria-label="Permalink to &quot;**对ProvidePlugin\\*不感兴趣\\***&quot;">​</a></h3><p><code>webpack.ProvidePlugin</code>是个好东西，<strong>但也不能滥用</strong>。</p><p>项目中用到的变量/函数/库或工具，只要配置后就可以在任何地方使用了。</p><p><strong>相信我--看完这个示例，如果你没用过、那你肯定会迫不及待的想要尝试了🤗</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const webpack = require(&#39;webpack&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  // 其他配置...</span></span>
<span class="line"><span>  plugins: [</span></span>
<span class="line"><span>    new webpack.ProvidePlugin({</span></span>
<span class="line"><span>      React: &#39;react&#39;,</span></span>
<span class="line"><span>      _: &#39;lodash&#39;,</span></span>
<span class="line"><span>      dayjs: &#39;dayjs&#39;,</span></span>
<span class="line"><span>      // 假设项目中自己定义的utils.js在src目录下</span></span>
<span class="line"><span>      Utils: path.resolve(__dirname, &#39;src/utils.js&#39;)</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>  // 其他配置...</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>现在你可以在任何地方使用 dayjs、lodash、Utils等，而不需要导入它</strong></p><p>小结：</p><ul><li>webpack.ProvidePlugin是一个强大的工具，它可以帮助我们减少重复的导入语句，使代码更加干净整洁。但是，它不会减少构建大小，因为这些库仍然会被包含在你的最终打包文件中。正确使用这个插件可以<strong>提高开发效率</strong>，但需要谨慎使用，以避免隐藏依赖关系，导致代码难以理解和维护。</li><li>对于需要按需加载的模块或组件，考虑使用动态 import() 语法，这样可以更有效地控制代码的加载时机和减小打包体积。</li><li>谨慎使用 ProvidePlugin，只为那些确实需要在多个地方使用的模块配置全局变量，以避免不必要的代码打包。</li></ul><p>另外，如果是<code>Vite</code>项目可以使用<code>vite-plugin-inject</code>代替<code>ProvidePlugin</code>的功能</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 配置</span></span>
<span class="line"><span>import inject from &#39;vite-plugin-inject&#39;; // 实测暂不可用，有替代方案再更新</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>plugins: [</span></span>
<span class="line"><span>inject({</span></span>
<span class="line"><span>  // 键是你想要提供的全局变量，值是你要提供的模块</span></span>
<span class="line"><span>  dayjs: &#39;dayjs&#39;, // 例如，这将在全局范围内提供 &#39;dayjs&#39;，可以通过 dayjs 访问</span></span>
<span class="line"><span>  // 你可以继续添加其他需要全局提供的模块</span></span>
<span class="line"><span>}),</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果使用了TS，记得配置下类型：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// globals.d.ts文件 处理全局类型</span></span>
<span class="line"><span>import dayjs from &#39;dayjs&#39;;</span></span>
<span class="line"><span>declare global {</span></span>
<span class="line"><span>  const dayjs: typeof dayjs;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// tsconfig.json文件 也配置一下</span></span>
<span class="line"><span>{ </span></span>
<span class="line"><span>&quot;compilerOptions&quot;: { </span></span>
<span class="line"><span>// 编译选项... </span></span>
<span class="line"><span>}, </span></span>
<span class="line"><span>&quot;include&quot;: [ &quot;src/**/*&quot;, &quot;globals.d.ts&quot; // 确保 TypeScript 包括这个文件 ] </span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="大量-使用typescript导入类型" tabindex="-1">*<strong>大量*使用Typescript导入类型</strong> <a class="header-anchor" href="#大量-使用typescript导入类型" aria-label="Permalink to &quot;***大量\\*使用Typescript导入类型**&quot;">​</a></h3><p><strong>在TS项目中，满屏import肯定少不了TS的份</strong>。但如果合理配置，必定能急剧减少import的导入</p><p>这里介绍下自己在项目中使用最多的方法：TS命名空间。有了它既能让类型模块化，更过分的是在使用时可以直接不导入类型😅。</p><p><strong>同样，它和<code>ProvidePlugin</code>一样炸裂，可以直接灭掉<code>import</code>导入。</strong></p><hr><p>使用示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// accout.ts</span></span>
<span class="line"><span>declare namespace IAccount {</span></span>
<span class="line"><span>  type IList&lt;T = IItem&gt; = {</span></span>
<span class="line"><span>    count: number</span></span>
<span class="line"><span>    list: T[]</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  interface IUser {</span></span>
<span class="line"><span>    id: number;</span></span>
<span class="line"><span>    name: string;</span></span>
<span class="line"><span>    avatar: string;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 任意文件直接使用，无需导入</span></span>
<span class="line"><span>const [list, setList] = useState&lt;IAccount.IList|undefined&gt;();</span></span>
<span class="line"><span>const [user, setUser] = useState&lt;IAccount.IUser|undefined&gt;();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>注意⚠️eslint可能需要配置下开启🔛使用命名空间</p><h3 id="《不去充分-利用bable特性》" tabindex="-1">*<strong>《不去充分*利用bable特性》</strong> <a class="header-anchor" href="#《不去充分-利用bable特性》" aria-label="Permalink to &quot;***《不去充分\\*利用bable特性》**&quot;">​</a></h3><p><code>React</code>似乎也意识到不妥：在17版本之前，由于<code>jsx</code>的特性每个组件都需要明文引入<code>import React from &#39;react&#39;</code>，但在这之后<strong>由编译器自行转换，无需引入 React</strong>。如果你使用的<strong>React17</strong>之前的版本也可以通过修改babel达到这个目的，更多细节可参考<strong>React官网</strong>[3]，有非常详细的说明。（也提供了自动去除引入的脚本）</p><h3 id="其它" tabindex="-1"><strong>其它</strong> <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;**其它**&quot;">​</a></h3><h4 id="_1-设置webpack、ts别名。" tabindex="-1"><strong>1. 设置webpack、ts别名。</strong> <a class="header-anchor" href="#_1-设置webpack、ts别名。" aria-label="Permalink to &quot;**1. 设置webpack、ts别名。**&quot;">​</a></h4><p>既能缩短导入路径、也能更有语义化</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>resolve: {</span></span>
<span class="line"><span>  alias: {</span></span>
<span class="line"><span>    &quot;@src&quot;: path.resolve(__dirname, &#39;src/&#39;),</span></span>
<span class="line"><span>    &quot;@components&quot;: path.resolve(__dirname, &#39;src/components/&#39;),</span></span>
<span class="line"><span>    &quot;@utils&quot;: path.resolve(__dirname, &#39;src/utils/&#39;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用别名前</span></span>
<span class="line"><span>import MyComponent from &#39;../../../../components/MyComponent&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用别名后</span></span>
<span class="line"><span>import MyComponent from &#39;@components/MyComponent&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_2-设置格式化prettier-printwidth" tabindex="-1"><strong>2. 设置格式化prettier.printWidth</strong> <a class="header-anchor" href="#_2-设置格式化prettier-printwidth" aria-label="Permalink to &quot;**2. 设置格式化prettier.printWidth**&quot;">​</a></h4><p>值设置的太小可能会导致频繁换行、给够难以阅读。其值在120较为合适吧（看团队实际的使用情况）。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;printWidth&quot;: 120,</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3-按条件动态全局加载组件" tabindex="-1"><strong>3. 按条件动态全局加载组件</strong> <a class="header-anchor" href="#_3-按条件动态全局加载组件" aria-label="Permalink to &quot;**3. 按条件动态全局加载组件**&quot;">​</a></h4><p>在入口文件引入全局组件，使用require.ensure或import根据条件动态加载组件，既能便于维护、减少引用、也能减少性能开销</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 异步加载全局弹窗，减少性能开销</span></span>
<span class="line"><span>Vue.component(&#39;IMessage&#39;, function (resolve) {</span></span>
<span class="line"><span>  // 指定条件全局加载，无需在具体页面中引用</span></span>
<span class="line"><span>  if (/^\\/pagea|pageb/.test(location.pathname)) {</span></span>
<span class="line"><span>  require.ensure([&#39;./components/message/index.vue&#39;], function() {</span></span>
<span class="line"><span>    resolve(require(&#39;./components/message/index.vue&#39;));</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_4-babel-plugin-import的使用" tabindex="-1"><strong>4. babel-plugin-import的使用</strong> <a class="header-anchor" href="#_4-babel-plugin-import的使用" aria-label="Permalink to &quot;**4. babel-plugin-import的使用**&quot;">​</a></h4><p><code>babel-plugin-import</code>不是直接减少 import 的数量，而是通过优化 import 语句来减少打包体积，提高项目的加载性能。这对于使用了大型第三方库的项目来说是一个非常有价值的优化手段。</p><p>以<code>arco-design</code>为例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// .bablerc配置</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;plugins&quot;: [</span></span>
<span class="line"><span>    [&quot;import&quot;, {</span></span>
<span class="line"><span>      &quot;libraryName&quot;: &quot;@arco-design/web-react&quot;,</span></span>
<span class="line"><span>      &quot;libraryDirectory&quot;: &quot;es&quot;, // 或者 &quot;lib&quot;，依赖于具体使用的模块系统</span></span>
<span class="line"><span>      &quot;style&quot;: true // 加载 CSS</span></span>
<span class="line"><span>    }, &quot;@arco-design/web-react&quot;]</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// 这个配置告诉 babel-plugin-import 自动将类似 import { Button } from &#39;@arco-design/web-react&#39;; 的导入语句转换为按需导入的形式，并且加载对应的 CSS 文件。</span></span>
<span class="line"><span>// 业务中使用</span></span>
<span class="line"><span>import { Button } from &#39;@arco-design/web-react&#39;;</span></span>
<span class="line"><span>// 将被bable编译成</span></span>
<span class="line"><span>import Button from &#39;@arco-design/web-react/es/button&#39;;</span></span>
<span class="line"><span>import &#39;@arco-design/web-react/es/button/style/css.js&#39;; // 如果 style 配置为 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h2><p>导致import占满全屏的原因有很多。但不用<code>模块重导、require.context、import动态导入、webpack.ProvidePlugin</code>等手段，一定会让我们写出满屏的import😂🤣😅😇。</p><p>只有想不到的，没有做不到的。只要你想、相信就一定能如愿以偿。</p><p><strong>标注</strong></p><p>[1]</p><p><a href="https://github.com/arco-design/arco-design/blob/main/components/index.tsx" target="_blank" rel="noreferrer">https://github.com/arco-design/arco-design/blob/main/components/index.tsx</a></p><p>[2]</p><p><a href="https://juejin.cn/post/7344571292354838591" target="_blank" rel="noreferrer">https://juejin.cn/post/7344571292354838591</a></p><p>[3]</p><p><a href="https://zh-hans.legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html" target="_blank" rel="noreferrer">https://zh-hans.legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html</a></p>`,83),i=[r];function t(o,c,b,u,d,m){return a(),n("div",null,i)}const v=s(l,[["render",t]]);export{g as __pageData,v as default};
